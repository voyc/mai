html/jslib/dragger.html:		#stacks {
html/jslib/dragger.html:		.stack {
html/jslib/dragger.html:						console.log('stack rearrangd'); 
html/jslib/dragger.html:		<div id='stacks'>
html/jslib/dragger.html:			<div class='stack' id='untried' ></div>
html/jslib/dragger.html:			<div class='stack' id='work'    ></div>
html/jslib/dragger.html:			<div class='stack' id='review'  ></div>
html/jslib/dragger.html:			<div class='stack' id='mastered'></div>
html/jslib/observer.js:	this.stack = [];
html/jslib/observer.js:		if (!this.stack[notename]) {
html/jslib/observer.js:			this.stack[notename] = [];
html/jslib/observer.js:		this.stack[notename].push( {subscriber:subscriber, callback:callback});
html/jslib/observer.js:		if (!this.stack[note.name]) {
html/jslib/observer.js:		var callbackarray = this.stack[note.name];
html/thai/dict.js:{id:1408,g:'o',t:'ก่าย',s:1,l:500,n:1,p:'v',e:'stack',d:'to stack; pile things up; rest one thing on another',u:'',r:'',m:'',a:'',ns:1,lc:'ก',fc:'ย',vp:'oา',tm:'่',tn:'L',tl:'gaay',ru:'fsc,mc1',sn:'',cp:'',ps:''},
html/js/lee.js:	A drill is run on a stack of flash cards.
html/js/lee.js:	The drill continues until the student masters all the cards in the stack.
html/js/lee.js:		drill - start stack: priming nextCard
html/js/lee.js:	this.stack = {};
html/js/lee.js:		optStackSize:8,
html/js/lee.js:voyc.Lee.prototype.drill = function(stack,callback) {
html/js/lee.js:	this.stack = stack;
html/js/lee.js:	for (var i=0; i<this.stack.data.length; i++) {
html/js/lee.js:		var t = this.stack.data[i];
html/js/lee.js:		if (this.stack.dictType == 'word' || this.stack.dictType == 'glyph') {
html/js/lee.js:		else if (this.stack.dictType == 'phrase') {
html/js/lee.js:	switch(this.stack.algorithm) {
html/js/lee.js:			var workstack = [];
html/js/lee.js:					workstack.push(score);
html/js/lee.js:			if (workstack.length <= 0) {
html/js/lee.js:			workstack.sort(function(a,b) {
html/js/lee.js:			var nhalf = Math.floor(workstack.length/2);
html/js/lee.js:				workstack.pop();
html/js/lee.js:			var n = Math.floor(Math.random() * workstack.length);
html/js/lee.js:			chosen = workstack[n].ndx;  // this.ndxCard
html/js/lee.js:	if (this.stack.direction == 'reverse') {
html/js/lee.js:				if (this.stack.direction == 'reverse') {
html/js/miyagi.js:		optStackSize:8,
html/js/sam.js:	if (level.currentStackNdx < 0) {
html/js/sam.js:		level.currentStackNdx = 0;
html/js/sam.js:		if (this.level.glyph.length > 0 && this.level.word < this.lee.setting.optStackSize) {
html/js/sam.js:			var limit = this.lee.setting.optStackSize - this.level.word.length;
html/js/sam.js:		if (this.level.word.length > 0 && this.level.phrase < this.lee.setting.optStackSize) {
html/js/sam.js:	this.level.initStacks();
html/js/sam.js:	this.vocab.set(level.id, 'l', level.currentStackNdx.toString());
html/js/sam.js:	var stack = level.stacks[level.currentStackNdx];
html/js/sam.js:	this.lee.drill(stack, function(scores) {
html/js/sam.js:	// next stack
html/js/sam.js:	this.level.currentStackNdx++;
html/js/sam.js:	if (this.level.currentStackNdx >= this.level.stacks.length) { 
html/js/sam.js:	this.vocab.set(this.level.id, 'l', this.level.currentStackNdx.toString());
html/js/sam.js:	// proceed with next stack?
html/js/sam.js:	var stack = this.level.stacks[this.level.currentStackNdx];
html/js/sam.js:	if (stack.direction == 'normal') {
html/js/sam.js:		s += 'Let\'s try some '+stack.dictType+'s.<br/>';
html/js/sam.js:	else if (stack.direction == 'reverse') {
html/js/sam.js:	this.state = 'nextstack';
html/js/sam.js:	this.level.currentStackNdx = 'm';
html/js/sam.js:	this.vocab.set(this.level.id, 'l', this.level.currentStackNdx.toString());
html/js/sam.js:				case 'nextstack':
html/js/sam.js:	story to stack
html/js/sam.js:	parts of story to stack: words, new words, lines, expressions, glyphs
html/js/sam.js:	storyToStack(story,'words');
html/js/sam.js:	var stack = level.stacks[level.currentStackNdx];
html/js/sam.js:	this.lee.drill(stack, function(scores) {
html/js/level.js:	Can have multiple stacks created by course author.
html/js/level.js:	Noam adds prereq stacks.
html/js/level.js:	Noam adds postreq stacks. 
html/js/level.js:	this.stacks = [];
html/js/level.js:	this.primaryStackNdx = 0;
html/js/level.js:	this.currentStackNdx = 0;
html/js/level.js:voyc.Level.prototype.initStacks = function(level) {
html/js/level.js:		this.stacks.push(p);
html/js/level.js:		this.stacks.push(p);
html/js/level.js:		this.stacks.push(p);
html/js/level.js:		this.stacks.push(p);
html/js/level.js:		this.stacks.push(p);
html/js/level.js:	// identify primary stack
html/js/level.js:	for (var i=0; i<this.stacks.length; i++) {
html/js/level.js:		if (this.stacks[i].primary) {
html/js/level.js:	this.primaryStackNdx = ndx;
html/js/level.js:	// let authors override three settings on primary stack
html/js/level.js:	//     note: settings for the other stacks cannot be specified by author
html/js/level.js:	var primaryStack = this.stacks[this.primaryStackNdx];
html/js/level.js:		primaryStack.algorithm = this.algorithm;
html/js/level.js:		primaryStack.initialShuffle = this.initialShuffle;
html/js/level.js:		primaryStack.workSize = this.workSize;
html/minimal/index.html:			<p>not recommended: http://stackoverflow.com/questions/6865943/html-form-select-option-vs-datalist-option</p>
