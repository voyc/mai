html/icon/compilejs.py:	('compilation_level', 'ADVANCED_OPTIMIZATIONS'),
html/jslib/compilejs.py:	('compilation_level', 'ADVANCED_OPTIMIZATIONS'),
html/jslib/comm.js:		// 1. this.data = an object one-level deep
html/thai/dictionary.js:	l:level (100,200,300,...)
html/thai/lesson.js:voyc.Level = function(vocab) {
html/thai/lesson.js:	this.vocab = vocab;  // each level state is stored in vocab
html/thai/lesson.js:	this.list = voyc.levels; // static array of levels
html/thai/lesson.js:	this.current = false;   // a copy of the current level object, saved in localStorage
html/thai/lesson.js:		firstLevelId: '',//;this.list[0].id,
html/thai/lesson.js:		lastLevelId: '',//this.list[this.list.length-1].id,
html/thai/lesson.js:voyc.Level.prototype.retrieve = function() {
html/thai/lesson.js:	var ls = localStorage.getItem('level');
html/thai/lesson.js:voyc.Level.prototype.store = function() {
html/thai/lesson.js:	localStorage.setItem('level', JSON.stringify(this.current));
html/thai/lesson.js:voyc.Level.prototype.getName = function() {
html/thai/lesson.js:voyc.Level.prototype.loadPreviousLevelInProgress = function() {
html/thai/lesson.js:	// get previous level object from localStorage if it exists
html/thai/lesson.js:	// if not, recreate level object from vocab
html/thai/lesson.js:		var prev = {w:this.settings.firstLevelId, s:-1, r:0};
html/thai/lesson.js:		this.current = voyc.clone(this.getLevelFromId(prev.w));
html/thai/lesson.js:voyc.Level.prototype.getLevelFromId = function(id) {
html/thai/lesson.js:	var level = false;
html/thai/lesson.js:		level = this.list[i];
html/thai/lesson.js:		if (level.id == id) {
html/thai/lesson.js:	return level;
html/thai/lesson.js:voyc.Level.prototype.currentNdx = function() {
html/thai/lesson.js:		var level = this.list[i];
html/thai/lesson.js:		if (level.id == this.current.id) {
html/thai/lesson.js:voyc.Level.prototype.next = function() {
html/thai/lesson.js:	var level = false;
html/thai/lesson.js:		level = this.list[ndx];
html/thai/lesson.js:	this.current = level;
html/thai/lesson.js:	return level;
html/thai/lesson.js:voyc.Level.prototype.isLevelFinished = function() {
html/thai/lesson.js:voyc.Level.prototype.isLastLevel = function() {
html/thai/dict2.js:	l:level (100,200,300,...)
html/thai/dict2.js:{s:2 ,l:300, n:1, g:'o' ,p:'v', t:'เพิ่ม'		,e:'increase'	,d:'to increase; add; grow; advance; boost; develop; enlarge; enhance; escalate; expand; extend; multiply; raise; spread; swell'},
html/thai/dict2.js:{s:2 ,l:400, n:1, g:'o' ,p:' ', t:'เรียน'		,e:''	,d:'to study at the elementary school level'},
html/thai/dict2.js:{s:2 ,l:400, n:1, g:'o' ,p:' ', t:'สำราญ'		,e:''	,d:'[is] content happy; reveling (in)'},
html/thai/dict2.js:{s:2 ,l:400, n:1, g:'o' ,p:' ', t:'เสมอ'		,e:''	,d:'[is] even; level; flush'},
html/thai/keyboard2.js:				self.promptDeveloper();
html/thai/keyboard2.js:	promptDeveloper: function() {
html/thai/course/gr/consonantcluster.js:var level = `
html/thai/course/au/lessons.js:เสื้อไม่มีแขน	sleveless shirt
html/thai/course/au/compound.js:เสื้อไม่มีแขน	sleveless shirt
html/thai/course/au/lessons.txt:เสื้อไม่มีแขน	sleveless shirt
html/thai/dict.js:{id:985,g:'m',t:'เรียน',s:2,l:400,n:1,p:'v',e:'study',d:'to study at the elementary school level',u:'',r:'',m:'',a:'',ns:1,lc:'ร',fc:'น',vp:'เoีย',tm:'',tn:'M',tl:'riian',ru:'',sn:'',cp:'',ps:''},
html/thai/dict.js:{id:1136,g:'m',t:'สำราญ',s:2,l:400,n:1,p:'',e:'',d:'[is] content happy; reveling (in)',u:'',r:'',m:'',a:'',ns:2,lc:'',fc:'',vp:'',tm:'',tn:'',tl:'',ru:'',sn:'',cp:'',ps:''},
html/thai/dict.js:{id:1155,g:'m',t:'เสมอ',s:2,l:400,n:1,p:'j',e:'even',d:'[is] even; level; flush',u:'',r:'',m:'',a:'',ns:2,lc:'',fc:'',vp:'',tm:'',tn:'',tl:'smawee',ru:'',sn:'',cp:'',ps:''},
html/thai/dict.js:{id:830,g:'o',t:'เพิ่ม',s:2,l:300,n:1,p:'v',e:'increase',d:'to increase; add; grow; advance; boost; develop; enlarge; enhance; escalate; expand; extend; multiply; raise; spread; swell',u:'',r:'',m:'',a:'',ns:1,lc:'พ',fc:'ม',vp:'เoิ',tm:'่',tn:'F',tl:'pöm',ru:'fsc,lc1',sn:'',cp:'',ps:''},
html/js/vocab.js:	localStorage.removeItem('level');
html/js/curriculum.js:	Show the level reached for each course.
html/js/curriculum.js:		section > course > level > drill
html/js/curriculum.js:	id = 2-char section, 4-char course, 2-char level; key to vocab
html/js/curriculum.js:	Sam steps through the levels and drills.
html/js/curriculum.js:		// columns 2 thru 10: level 1 thru 9
html/js/curriculum.js:		var level1 = 2;
html/js/curriculum.js:			var lcid = voyc.levelColors[l-1].id;
html/js/curriculum.js:	for (var i=0; i<voyc.levelColors.length; i++) {
html/js/curriculum.js:		var levelColor = voyc.levelColors[i]; 
html/js/curriculum.js:		s += this.drawLevel(c, levelColor);
html/js/curriculum.js:voyc.Curriculum.prototype.drawLevel = function(c, level) {
html/js/curriculum.js:	if (typeof(c[level.id]) == 'undefined') {
html/js/curriculum.js:	var lvl = c[level.id];
html/js/curriculum.js:	s += '<div select class="panel list '+level.id+'">';
html/js/curriculum.js:	s += '<h3>'+level.name+'</h3>';
html/js/curriculum.js:			voyc.mai.sam.startLevel(id);
html/js/sam.js:	//this.level.loadPreviousLevelInProgress();
html/js/sam.js:	//this.setupFirstLevel(interval);
html/js/sam.js:voyc.Sam.prototype.setupFirstLevel = function(interval) {
html/js/sam.js:	var level = this.level;
html/js/sam.js:	if (level.currentStackNdx < 0) {
html/js/sam.js:		level.currentStackNdx = 0;
html/js/sam.js:		this.level.store();
html/js/sam.js:		s += 'We recommend you start with ' + this.level.getName() + '.';
html/js/sam.js:	else if (this.level.isLevelFinished()) {
html/js/sam.js:		// start next level
html/js/sam.js:		s += "you cleared " + this.level.getName() + '. ';
html/js/sam.js:		this.level.next();
html/js/sam.js:		s = 'The next level is ' + this.level.getName() + '. ';
html/js/sam.js:		// restart level silently
html/js/sam.js:		// restart level with confirmation
html/js/sam.js:		s += 'You were working on ' + this.level.getName() + '.';
html/js/sam.js:voyc.Sam.prototype.startLevel = function(id) {
html/js/sam.js:	var levelid = id.substr(6,2);
html/js/sam.js:	var lvl = voyc[this.lang].course[sectionid][courseid][levelid];
html/js/sam.js:	this.level = new voyc.Level(this.lang,lvl);
html/js/sam.js:	var words = this.noam.parseStoryBySpace(this.level.phrase, {newWordsOnly:false, format:'dict'});
html/js/sam.js:		this.level.glyph = this.level.glyph.concat(glyphs);
html/js/sam.js:	if (this.level.prereq) {
html/js/sam.js:		var words = this.noam.parseStoryBySpace(this.level.phrase, {newWordsOnly:true, format:'dict'});
html/js/sam.js:		this.level.word = this.level.word.concat(words);
html/js/sam.js:		this.level.glyph = this.level.glyph.concat(glyphs);
html/js/sam.js:	if (this.level.postreq) {
html/js/sam.js:		if (this.level.glyph.length > 0 && this.level.word < this.lee.setting.optStackSize) {
html/js/sam.js:			var target = this.level['glyph'];
html/js/sam.js:			var limit = this.lee.setting.optStackSize - this.level.word.length;
html/js/sam.js:				this.level.word = this.level.word.concat(collection);
html/js/sam.js:		if (this.level.word.length > 0 && this.level.phrase < this.lee.setting.optStackSize) {
html/js/sam.js:			this.level.phrase = this.level.phrase.concat(collection);
html/js/sam.js:	//var analysis = this.noam.analyzeStory(this.level.phrase);
html/js/sam.js:	this.level.initStacks();
html/js/sam.js:	this.level.store();
html/js/sam.js:	this.startDrill(this.level);
html/js/sam.js:voyc.Sam.prototype.startDrill = function(level) {
html/js/sam.js:	this.vocab.set(level.id, 'l', level.currentStackNdx.toString());
html/js/sam.js:	this.level.store();
html/js/sam.js:	var stack = level.stacks[level.currentStackNdx];
html/js/sam.js:	this.level.currentStackNdx++;
html/js/sam.js:	if (this.level.currentStackNdx >= this.level.stacks.length) { 
html/js/sam.js:		this.endLevel();
html/js/sam.js:	this.vocab.set(this.level.id, 'l', this.level.currentStackNdx.toString());
html/js/sam.js:	this.level.store();
html/js/sam.js:	var stack = this.level.stacks[this.level.currentStackNdx];
html/js/sam.js:voyc.Sam.prototype.endLevel = function() {
html/js/sam.js:	this.state = 'nextlevel';
html/js/sam.js:	this.level.currentStackNdx = 'm';
html/js/sam.js:	this.vocab.set(this.level.id, 'l', this.level.currentStackNdx.toString());
html/js/sam.js:	this.level.store();
html/js/sam.js:	var prevLevelName = this.level.getName();
html/js/sam.js:	var nextLevel = this.level.next();
html/js/sam.js:	var nextLevelName = this.level.getName(nextLevel)
html/js/sam.js:	if (nextLevel) {
html/js/sam.js:		var s = 'Congratulations.  You have cleared level ' + prevLevelName + '.<br/>';
html/js/sam.js:		s += 'The next level is ' + nextLevelName + '.<br/>';
html/js/sam.js:		s += 'Continue with next level?';
html/js/sam.js:		this.chat.post(this.chatid, 'Congratulations.  You have cleared all of the levels.');
html/js/sam.js:					this.startDrill(this.level);
html/js/sam.js:				case 'nextlevel':
html/js/sam.js:					this.level = this.level.next();
html/js/sam.js:					this.startLevel(this.level.id);
html/js/sam.js:		case 'showalllevels':
html/js/sam.js:			this.startLevel(this.level.id);
html/js/sam.js:				this.chat.post(this.chatid, "Try a level first");
html/js/sam.js:	var stack = level.stacks[level.currentStackNdx];
html/js/level.js:	The Level object.
html/js/level.js:	Each course has nine levels.
html/js/level.js:	Begins life as a copy of the level of a course.
html/js/level.js:voyc.Level = function(lang,level) {
html/js/level.js:	this.id = level.id;
html/js/level.js:	this.name = level.name;
html/js/level.js:	this.primaryDictType = level.primaryDictType;
html/js/level.js:	this.prereq = level.prereq;
html/js/level.js:	this.postreq = level.postreq;
html/js/level.js:	this.glyph = level.glyph;
html/js/level.js:	this.word = level.word;
html/js/level.js:	this.phrase = level.phrase;
html/js/level.js:voyc.Level.prototype.initStacks = function(level) {
html/js/level.js:voyc.Level.prototype.settingOverrideByAuthor = function() {
html/js/level.js:voyc.Level.prototype.store = function() {
html/js/level.js:	localStorage.setItem('level', JSON.stringify(this));
html/js/level.js:voyc.Level.prototype.retrieve = function() {
html/js/level.js:	var level = JSON.parse(localStorage.getItem('level'));
html/js/level.js:	if (level) {
html/js/level.js:		this.setup(level);
html/js/level.js:voyc.Level.prototype.remove = function() {
html/js/level.js:	localStorage.removeItem('level');
html/js/level.js:voyc.Level.prototype.getName = function(level) {
html/js/level.js:	level = level || this;
html/js/level.js:	var colorid = level.id.substr(6,2);
html/js/level.js:	var levelcolor = this.getLevelColorById(colorid);
html/js/level.js:	var s = levelcolor.name;
html/js/level.js:	if (level.name) {
html/js/level.js:		s += ': ' + level.name; 
html/js/level.js:voyc.Level.prototype.next = function() {
html/js/level.js:	var nextLevel = false;
html/js/level.js:	var levelid = this.id.substr(6,2);
html/js/level.js:	for (var i=0; i<voyc.levelColors.length; i++) {
html/js/level.js:		var lc = voyc.levelColors[i];
html/js/level.js:		if (lc.id == levelid) {
html/js/level.js:	if (ndx < voyc.levelColors.length) {
html/js/level.js:		var nextlevelid = voyc.levelColors[ndx].id;
html/js/level.js:		if (voyc[this.lang].course[sectionid][courseid][nextlevelid]) {
html/js/level.js:			nextLevel = voyc[this.lang].course[sectionid][courseid][nextlevelid];
html/js/level.js:	return nextLevel;
html/js/level.js:voyc.Level.prototype.getLevelColorById = function(id) {
html/js/level.js:	voyc.levelColors.forEach(function(value,index,array) {
html/js/level.js:voyc.levelColors = [
html/minimal/compilejs.py:	('compilation_level', 'ADVANCED_OPTIMIZATIONS'),
html/minimal/normaleyes.css:/* Text-level semantics
html/minimal/index.html:			Between two adjacent vertical block-level elements, 
html/minimal/index.html:				<li>monospace - Used by the developer tags: pre, code, var, samp</li>
html/minimal/index.html:				<h3>Developer Tags</h3>
html/minimal/index.html:				<h3>Developer</h3>
html/index.html:		<script src="js/level.js"></script>
html/noam.html:				s += "insert into mai.thaidict (level, source, type, numsyllables, numdef, pos, thai, eng, details) values ("+m.l+","+m.s+",'"+m.g+"',1,"+m.n+",'"+m.p+"','"+m.t+"','"+m.e+"','"+m.d+"');";
