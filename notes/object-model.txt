==============================
object model

every class is a global singleton

Specialists
	voyc.noam
	voyc.sengen
	voyc.sam
	voyc.lee - controlled by sam

Data Model
	voyc.story - instantiated by sam, used by sam and storyview, calls noam
	voyc.dictionary
	voyc.alphabet
	voyc.vocab 

View
	voyc.storyview - drives storyview, list, insert, view
	voyc.editor - drives editor page
	voyc.view - drives home page, left-nav, settings-dropdown
	voyc.chat - is, in fact, the home page, used by sam and lee
	
Controller
	voyc.mai - starting point.  instantiated on windows.load event

Utilities
	voyc.browserhistory - nav() called by mai, storyview, sam, editor, view
	voyc.observer - called by sam, view, story, vocab, dictionary
	voyc.comm - called by the four "model classes"

==============================
thoughts

sam owns chat, passes to lee
editor calls nav to itself.  could make clients call nav, like storyview does.

story.list() - good example of tight use of voyc.comm.request(), but resolve id

Observer notifications
	1. on data received from voyc.comm
	2. on UI page switch by browserhistory.nav
	3. user requests, submits, completes
==============================
data structures

flat
dict
mean
loc
word
story

==============================
todo
x 1. fix instantiation of a single global story object
2. a single global object for dictionary, alphabet, vocab
3. do specialists: sam, lee, noam, sengen
4. do UI view objects: speech, editor, storyview
5. do keyboard and fold into stories and drill
6. let mai own view
7. sam should own only chat and lee 
8. storyview, editor, keyboard, etc, should be accessed only by nav()
9. view object drives the home page and nav menu
==============================

./html/js/mai.js:	this.chat = new voyc.Chat();
./html/js/mai.js:	this.sam = new voyc.Sam(this.chat);
./html/js/mai.js:	voyc.alphabet = new voyc.Alphabet();

./html/js/sam.js:	voyc.dictionary = new voyc.Dictionary();
./html/js/sam.js:	this.lee = new voyc.Lee(this.chat, this.observer);
./html/js/sam.js:	this.speech = new voyc.Speech();
./html/js/sam.js:	voyc.editor = new voyc.Editor(voyc.$('editor'), this.observer, this.noam);

x ./html/thai/noam.js:	this.alphabet = new voyc.Alphabet(dictionary);
dicionary and vocab passed into noam

./html/thai/keyboard2.js:	voyc.keyboard = new voyc.Keyboard();
./html/thai/keyboard2.js:	(new voyc.Keyboard).alphabet = alphabet;

editor:   voyc.mai.sam.speech.speak( s,l);

